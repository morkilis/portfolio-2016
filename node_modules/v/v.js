// ====================
// LIBS
// ====================
// nodejs local modules
var fs = require('fs');
var path = require('path');
var run = require('child_process').exec;

// third party's modules
var colors = require('colors');
var _ = require('lodash');
var wrench = require('wrench');
var glob = require('glob');
var async = require('async');

// ====================
// CONF
// ====================
var conf = {
    debug: true,
    folder: {
        layouts: 'layouts',     // html文件位置
        js: ['js'],   // js文件位置，字符串或数组
        css: ['css'],     // css文件位置
        img: ['img'],   // 图片文件位置
        bowerLib: 'assets'  // 通过bower安装的第三方组件的位置
    },
    ignore: [
        'app.json',
        '.git',
        'iphone*',
        'android*',
        'ipad*',
        '.DS_Store*',
        '.*.swp',
        '.*~',
        '_dest',
        'public*',
        'release',
        'header\.html',
        'footer\.html'
    ],
    platforms: {
        iphone: {
            version: 11,
            exclude: [
                'js/dummy_data'
            ]
        },
        ipad: {
            version: 8,
            exclude: [
                'js/dummy_data'
            ]
        },
        android: {
            version: 11,
            exclude: [
                'js/dummy_data'
            ]
        }
    }
};
// =====================
// GLOB VARIABLES
// =====================
global.appDir = path.normalize(process.cwd());

// =====================
// CMD
// =====================
var cmd = process.argv.slice(2);
var commands = {
    'new': newCmd,
    'install': bowerCmd,
    'list': bowerCmd,
    'search': bowerCmd,
    'update': bowerCmd,
    'uninstall': bowerCmd,
    'info': bowerCmd,
    'serve': serveCmd,
    'zip': zipCmd
}
var helpScreen = _.template(fs.readFileSync(path.join(__dirname, 'help.txt'), 'utf8'));

if (cmd[0] === undefined) {
    console.log(helpScreen());
} else {
    var currentCmd = commands[cmd[0]] ? commands[cmd[0]]() : commands[cmd[0]];

    if (currentCmd === undefined) { return console.log(helpScreen()); }

    currentCmd.exec(cmd);
}

// =====================
// PLUGINS
// =====================
/**
 * 实例化新的工程
 * @param {Array} [argv]
 * @return {Object} { exec: xxoo }
 */
function newCmd(argv) {
    var _newCmd = function(argv) {

        if (argv[1] === undefined) { return console.error('请输入一个工程名!'.red); }

        var source = path.join(__dirname, 'templates/walle');
        var destination = path.join(global.appDir, argv[1]);

        wrench.copyDirSyncRecursive(source, destination);
        fs.mkdirSync(path.join(destination, 'public'), '0755');
        console.log('');
        console.log(' ✔ \t'.magenta + '新工程已被创建在'.green + argv[1].green + '\n');

        run('git init ' + destination, function(err) {
            if (err) {
                console.log('`git init`失败!'.red);
                console.log('请安装`git`(http://git-scm.com/)\n'.yellow);
            }
        });
    };

    return { exec: _newCmd };
}

function bowerCmd(argv) {
    var _bowerCmd = function(argv) {
        var bower = require('bower');

        if (argv[1] === undefined && argv[0] !== 'list') {
            return console.error('请输入第三方模块名！'.red);
        }

        // 将模块安装在assets文件夹下
        bower.config.directory = conf.folder.bowerLib;

        bower.commands[argv[0] || 'help'].line(['node', __dirname].concat(argv))
            .on('data',  function (data) { data && console.log(data); })
            .on('end',   function (data) { data && console.log(data); })
            .on('error', function (err)  { throw err })
    };

    return { exec: _bowerCmd };
}

function serveCmd(argv) {
    var _serveCmd = function(argv) {
        var connect = require('connect');
        var WebSocket = require('faye-websocket');
        var http = require('http');
        var open = require('open');
        var platform = argv[1];
        var chokidar = require('chokidar');
        var watcher = chokidar.watch(global.appDir, {
            ignore: /^(\.\w+|public)/,
            persistent: true,
        });
        var ws;
        var reloaded = true;

        if (typeof platform !== 'string') {
            console.error('Error:'.red);
            console.log('请输入平台名！');
            process.exit(1);
        }
        _buildAndCompileViews(platform);     // 编译模板文件
        var port = process.env.PORT || 3000;
        var publicDir = path.join(global.appDir, 'public');
        var app = connect().use(connect.static(publicDir));

        app.use(connect.logger('dev'));
        console.log(('Server started on port ' + port).green);

        var server = http.createServer(app).listen(port);
        open('http://localhost:' + port);

        // 文件改动
        server.addListener('upgrade', function(request, socket, head) {
            ws = new WebSocket(request, socket, head);

            ws.onopen = function() {
                console.log('\tConnected'.yellow);
                ws.send('Connected');
            }

            ws.onmessage = function(msg) {
                if(msg.data === 'done') {
                    reloaded = true;
                }
            };
        });

        var _reload = function() {
            console.log('\tReloading...'.yellow);
            ws && ws.send('reload');
        }

        // TODO reload
        watcher.on('change', function(path) {
            if (reloaded) {
                reloaded = false;

                console.log('>'.yellow + ' File ' + path.toString().underline + ' has been ' + 'changed'.blue);
                _buildAndCompileViews(platform, function() { _reload(); });
            }
        })
    };

    return { exec: _serveCmd };
}

function zipCmd(argv) {
    var _zipCmd = function(argv) {
        var platform = argv[1],
            startTime = Date.now()
            stopWatch = function() {
                console.log('==========================================='.blue.inverse);
                console.log(('       Congratulations! Done!              ').red.bold.inverse);
                console.log('==========================================='.blue.inverse);

                console.log('');
                console.log('');
                console.log('\tV\t'.bold.red + '共用时 '.white + ((Date.now() - startTime)/1000 + 's').underline.green);
                console.log('');
            };

        if (platform === undefined) {
            async.forEachSeries(Object.keys(conf.platforms), function(platform, callback) {
                _excludeFiles(platform);

                _generateZip(platform, callback);
            }, function(err) {
                if (err) {
                    console.error('Error:'.red);
                    console.error(err);
                }

                stopWatch();
            });
        } else {
            _generateZip(platform, function() {
                stopWatch();
            });
        }
    }

    return { exec: _zipCmd };
}

/**
 * 压缩、检查、生成zip包
 * TODO 文件md5 revision
 *
 */
function _generateZip(platform, cb) {
    // 读取配置压缩文件
    // *.js  *.css *.html 均会被压缩
    var _srcFolder = path.join(global.appDir, 'public');
    var _destFolder = path.join(global.appDir, '_dest');
    var startTime = Date.now();

    async.series([
        function(callback) {
            _miniProject(_srcFolder, _destFolder, callback);
        },
        function(callback) {
            var version = conf.platforms[platform].version,
                releasePath = path.join(global.appDir, 'release/' + platform);
            // 创建version文件
            wrench.mkdirSyncRecursive('_dest', 0755);
            fs.writeFileSync(path.join(_destFolder, 'version'), version, 'utf8');

            wrench.mkdirSyncRecursive(releasePath, '0755');

            run('java -jar ' + __dirname + '/tools/javazip/zip.jar ' + _destFolder + ' ' + path.join(releasePath, version + '.zip'), function(code, output) {
                console.log('==========================================='.yellow);
                console.log(('       Starting zip for ' + platform + '...').green);
                console.log('==========================================='.yellow);

                wrench.rmdirSyncRecursive(_destFolder);
                callback();
            });
        }
    ], function() {
        if (typeof cb === 'function') cb();
    });

}

function _miniProject(_srcFolder, _destFolder, callback) {

    async.series([
        function(callback) {
            glob(_srcFolder + '/**/*.js', function(err, files) {
                // var result = _jshint(files);
                var result = true;

                if (!result) {
                    console.error('================================'.red);
                    console.error('Please fixed these errors first!'.bold.red);

                    process.exit(1);
                }

                if (err) {
                    console.error('Error:'.red);
                    return console.error(e);
                }

                console.log('==========================================='.yellow);
                console.log('       Starting minify JS files....'.green);
                console.log('==========================================='.yellow);
                _miniJS(files, callback);
            });
        },
        function(callback) {
            glob(_srcFolder + '/**/*.css', function(err, files) {
                if (err) {
                    console.error('Error:'.red);
                    return console.error(e);
                }

                console.log('==========================================='.yellow);
                console.log('       Starting minify CSS files....'.green);
                console.log('==========================================='.yellow);
                _miniCSS(files, callback);
            });
        },
        function(callback) {
            glob(_srcFolder + '/**/*.html', function(err, files) {
                if (err) {
                    console.error('Error:'.red);
                    return console.error(e);
                }

                console.log('==========================================='.yellow);
                console.log('       Starting minify HTML files....'.green);
                console.log('==========================================='.yellow);
                _miniHTML(files, callback);
            });
        },
        function(callback) {
            // TODO 优化图片的处理，增加多种图片格式的支持
            // TODO 只第一次和新图片增加时压缩图片
            glob(_srcFolder + '/**/*.png', function(err, files) {
                if (err) {
                    console.error('Error:'.red);
                    return console.error(e);
                }

                console.log('==========================================='.yellow);
                console.log('       Starting minify Images....'.green);
                console.log('==========================================='.yellow);

                _miniIMG(files, callback);
            })
        }
    ], callback);
}

function _miniJS(files, callback) {
    var uglifyJS = require('uglify-js');

    var result = uglifyJS.minify(files, {
        outSourceMap: "out.js.map"
    });

    files.forEach(function(file) {
        var destPath = file.replace('public', '_dest');

        var source = uglifyJS.minify(file).code + ';'

        _createFile(destPath, source);

        console.log('➠ '.yellow + 'minifying '.grey + path.basename(file).underline.white + ' success!'.grey);
    });

    callback();
}

/**
 * js 语法检查
 *
 */
function _jshint(files) {
    var jshint = require('jshint').JSHINT;

    if (files.length) {
        var file = files.pop(),
            parse = false;

        var data = fs.readFileSync(file);

        if (jshint(data.toString())) {
            console.log(('✔'.bold + ' Passed ' + file).yellow);
            parse = true;
        } else {
            console.log(('✘'.bold + ' Failed ' + file).red);
            console.log('');
            var out = jshint.data(),
                errors = out.errors;

            errors.forEach(function(error) {
                if (error) {
                    console.log(('line ' +error.line).magenta + ':' + error.character + ('\n-> ' + error.reason + ' -> ' + error.evidence).grey);
                }
            });
        }
    }

    return parse;
}

function _miniCSS(files, callback) {
    var cleanCSS = require('clean-css');

    files.forEach(function(srcPath) {
        var destPath = srcPath.replace('public', '_dest');

        var source = cleanCSS.process(fs.readFileSync(srcPath, 'utf8'));

        _createFile(destPath, source);

        console.log('➠ '.yellow + 'minifying '.grey + path.basename(srcPath).underline.white + ' success!'.grey);
    });

    callback();
}

function _miniHTML(files, callback) {
    var htmlPacker = require('html-minifier').minify;

    files.forEach(function(srcPath) {
        var destPath = srcPath.replace('public', '_dest');

        var source = htmlPacker(fs.readFileSync(srcPath, 'utf8'), {
            removeComments: true,
            collapseWhitespace: true,
            removeEmptyAttributes: true
        });

        _createFile(destPath, source);

        console.log('➠ '.yellow + 'minifying '.grey + path.basename(srcPath).underline.white + ' success!'.grey);
    });

    callback();
}

function _miniIMG(files, callback) {
    var smushit = require('node-smushit');

    smushit.smushit(files, {
        onItemStart: function(item){
                console.log('➠ '.yellow + 'start smash '.grey + path.basename(item).underline.white);
        },
        onItemComplete: function(e, item, result){
            if (e) {
                console.error('Error:\n'.red);
                return console.error(e);
            }

            var source = fs.readFileSync(item, 'binary');
            var destPath = item.replace('public', '_dest');
            _createFile(destPath, source);

            console.log('➠ '.yellow + 'smash '.grey + path.basename(item).underline.white + ' successfully!'.grey);
            console.log('\tsource size: '.yellow + result.src_size.toString().green + ' ==> ' + 'destination size: '.yellow + result.src_size.toString().green);
        },
        onComplete: function(reports){
            console.log(' ✔ \t'.magenta + ' total: '.green + reports.total + ' ==== '.white + 'finished:  '.green + reports.finished + '\n');

            callback();
        }
    });
}

function _buildAndCompileViews(platform, callback) {
    var appSettings = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'app.json'), 'utf8')),     // 获取应用设置
        _settings = _.extend(conf, appSettings),
        files = fs.readdirSync(global.appDir),
        publicPath = path.join(global.appDir, 'public');

    delete _settings.ignore[_settings.ignore.indexOf(platform + '*')];
    _settings.platform = platform;

    // TODO 不要每次全删掉，改成增量的方式
    if (fs.existsSync(publicPath)) {
        wrench.rmdirSyncRecursive(publicPath);
    }
    fs.mkdirSync(publicPath);

    async.forEachSeries(files, function(filename, cb) {
        var filePath = path.join(global.appDir, filename),
            destPath = path.join(publicPath, filename);

        if (!_isIgnoredFiles(filename)) {
            if (fs.statSync(filePath).isDirectory()) {
                _copyFilesSync(filePath, publicPath, _settings.ignore);
            } else {
                if (isImg(filePath)) {
                    var content = fs.readFileSync(filePath, 'binary');
                } else {
                    var content = fs.readFileSync(filePath, 'utf8');
                }

                _createFile(destPath, content);
            }
        }

        cb();
    }, function(err) {
        if (err) {
            console.error('Error:');
            console.error(err);
        }
    });

    // css
    if (!_settings.folder.css) {
        console.error('Error:'.red);
        console.error('Can\'t find folder '.grey + 'css'.underline.magenta);
        return console.error('Please check your '.grey + 'app.json'.underline-magenta);
    } else if (typeof _settings.folder.css === 'string') {
        _buildCSS(path.join(global.appDir, _settings.folder.css));
    } else {
        async.forEachSeries(_settings.folder.css, function(relPath, cb) {
            _buildCSS(path.join(global.appDir, relPath), cb);
        },function(err) {
            if (err) {
                console.error('Error:');
                console.error(err);
            }
        });
    }

    // layouts接受字符串和数组
    if (!_settings.folder.layouts) {
        console.error('Error:'.red);
        console.error('Can\'t find folder '.grey + 'layouts'.underline.magenta);
        return console.error('Please check your '.grey + 'app.json'.underline-magenta);
    } else if (typeof _settings.folder.layouts === 'string') {
        _buildLayouts(path.join(global.appDir, _settings.folder.layouts));
    } else {
        async.forEachSeries(_settings.folder.layouts, function(relPath, cb) {
            _buildLayouts(path.join(global.appDir, relPath), cb);
        },function(err) {
            if (err) {
                console.error('Error:');
                console.error(err);
            }
        });
    }

    if (typeof callback === 'function') { callback(); }

}

function _buildLayouts(layoutsPath, callback) {
    var dest = path.join(global.appDir, 'public'),
        header, footer;

    var layoutList = glob.sync(layoutsPath + '/**/*.html');
    async.forEachSeries(layoutList, function(layout, cb) {

        if (_isIgnoredFiles(layout)) {
            cb();
            return false;
        }

        if (['header.html', 'footer.html'].indexOf(layout) < 0) {
            if (fs.existsSync(path.join(layoutsPath, 'header.html'))) {
                conf.title = conf.titles[path.basename(layout)];
                header = _.template(fs.readFileSync(path.join(layoutsPath, 'header.html'), 'utf8'), conf);
            } else {
                header = '';
            }

            if (fs.existsSync(path.join(layoutsPath, 'footer.html'))) {
                footer = _.template(fs.readFileSync(path.join(layoutsPath, 'footer.html'), 'utf8'), conf);
            } else {
                footer = '';
            }

            var content = fs.readFileSync(layout, 'utf8'),
                html = header + content + footer;

        }

        // html不去走_createFile
        fs.writeFileSync(layout.replace('layouts', 'public'), html, 'utf8');

        cb();
    }, function(err) {
        if (err) {
            console.error('Error:'.red);
            return console.error(err);
        }

        if (typeof callback === 'function') { callback(); }
    });
}

function _buildCSS(csssPath, callback) {
    var imgReg = /(?:url\(["']?)(.*?)(?:["']?\))/,
        dest = path.join(global.appDir, 'public');

    var cssList = glob.sync(csssPath + '/**/*.css');

    async.forEachSeries(cssList, function(css, cb) {
        if (_isIgnoredFiles(css)) {
            cb();
            return false;
        }

        var content = fs.readFileSync(css, 'utf8'),
            matches = content.match(new RegExp(imgReg.source, 'g'));

        if (matches) {
            var uris = _.uniq(matches.map(function(m) {
                return m.match(imgReg)[1];
            }));

            uris = uris.filter(function(u) {
                return (!u.match('(data:|http)') && !u.match('/[a-z0-9]+\.[a-z0-9]+\.[a-z0-9]/'));
            });

            uris.forEach(function(u) {
                var v = u,
                    src, replacement,
                    needle = path.resolve(path.dirname(css), v).slice((global.appDir + '/').length),
                    exname = path.basename(needle).split('.')[1];

                v = u.replace(needle, conf[exname][needle]);

                content = content.replace(new RegExp(u, 'g'), v);
            });
        }

        _createFile(css.replace('css', 'public/css'), content);

        cb();
    }, function(err) {
        if (err) {
            console.error('Error\n'.red);
            return console.error(err);
        }

        if (typeof callback === 'string') { callback(); }
    })
}

function _copyFilesSync(source, dest, ignoreList) {
    var basename = path.basename(source),
        dest = path.join(dest, basename);

    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, '0755');
    }

    fs.readdirSync(source).forEach(function(filename) {
        var filepath = path.join(source, filename);
        if (!_isIgnoredFiles(filepath)) {

            // TODO: 用mini-match等去做排除
            if (fs.statSync(filepath).isDirectory()) {
                _copyFilesSync(filepath, dest, ignoreList);
            } else {
                if (isImg(filepath)) {
                    var content = fs.readFileSync(filepath, 'binary');
                } else {
                    var content = fs.readFileSync(filepath, 'utf8');
                }

                _createFile(path.join(dest, filename), content);
            }
        }
    });
}

// =====================
// UTILS
// =====================
function _isIgnoredFiles(filename) {
    var isIgnore = false;

    conf.ignore.every(function(pattern) {
        if (new RegExp(pattern).test(filename)) {
            isIgnore = true
            return false;
        }

        return true;
    });

    return isIgnore;
}

function _createFile(dest, src) {
    var _settings = conf,
        arr = path.basename(dest).split('.'),
        extname = path.extname(dest),
        oriPath = dest.replace(global.appDir + '/public/', ''),
        version = md5(src),
        newPath;

    dest = dest.replace(extname, '.' + version.slice(0, 8) + extname);

    wrench.mkdirSyncRecursive(path.dirname(dest), 0755);
    if (isImg(dest)) {
        fs.writeFileSync(dest, src, 'binary');
    } else {
        fs.writeFileSync(dest, src);
    }

    newPath = dest.replace(global.appDir + '/public/', ''),
    _settings[arr[1]] = _settings[arr[1]] || {};
    _settings[arr[1]][oriPath] = newPath;

}

function isImg(srcPath) {
    var extname = path.extname(srcPath);
    return ['.png', '.ico', '.gif', '.jpg', '.jpeg'].indexOf(extname) > -1
}

function md5 (str) {
    var crypto = require('crypto');
    return crypto.createHash('md5').update(str).digest('hex');
};

// TODO 支持exclude文件和文件夹
function _excludeFiles(platform) {
    var exclude = conf.platforms[platform].exclude;

    if (exclude) {
        if (typeof excludes === 'string') {
            var exPath = path.join(global.appDir, 'public/' + excludes);
            if (fs.existsSync(exPath)) {
                wrench.rmdirSyncRecursive(exPath);
            } else {
                console.error('Warn:'.magenta);
                console.error('`exlude`: '.underline + exPath + ' doesn\'t exist!');
            }
        } else {
            if (!Array.isArray(exclude)) {
                console.error('Error:'.red);
                console.error('`exlude` should only be array or string');
                process.exit(1);
            }
            exclude.forEach(function(ex) {
                var exPath = path.join(global.appDir, 'public/' + ex);
                if (fs.existsSync(exPath)) {
                    wrench.rmdirSyncRecursive(exPath);
                } else {
                    console.error('Warn:'.magenta);
                    console.error('`exlude`: '.underline + exPath + ' doesn\'t exist!');
                }
            });
        }
    }
}