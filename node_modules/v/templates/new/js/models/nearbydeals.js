define(function(require, exports, module) {
    'use strict'

    var API = M.config.API,
        nearbyURL = 'deal/search/substore/$/near',
        FINAL = 6378137.0,
        DetailModel = require('/js/models/detail'),
        _ = require('_'),
        Backbone = require('Backbone')

    // merchant nearby deals model
    var NearbyDealsModel = Backbone.Model.extend({
        // ?slug=(slug)&hasbuy=(hasbuy)&distance=(distance)&offset=(offset)&limit=(limit)
        urlRoot: function() {
            return (API + nearbyURL.replace(/\$/, DetailModel.get('bizloginid')) + '?slug=' + DetailModel.get('dealid') + '&hasbuy=' + DetailModel.get('hasBought'))
        },
        parse: function(res) {
            var from = [DetailModel.get('lat'), DetailModel.get('lng')],
                to = []

            if (res && res.data && _.isArray(res.data)) {
                res.data.forEach(function(deal) {
                    if (deal.mlls) {
                        to = deal.mlls.indexOf(';') ? deal.mlls.split(';')[0].split(',') : deal.mlls.split(',')
                        deal.distance = calcDistance(from, to).toFixed(0)
                        if (deal.distance > 1000) {
                            deal.distance = (deal.distance/1000).toFixed(1) + 'km'
                        } else {
                            deal.distance += 'm'
                        }
                    } else {
                        M.log({
                            msg: 'nearby deals model: there is no deal.mlls',
                            url: 'nearby_deals.js',
                            line: 23
                        })
                    }
                })
            }

            return res
        }
    })

    /**
     * 求某个经纬度的值的角度值
     * @param {Object} d
     */
    function calcDegree(d){
        return d*Math.PI/180.0 ;
    }

    /**
     * 根据两点经纬度值，获取两地的实际相差的距离
     * @param {Object} f    第一点的坐标位置[latitude,longitude]
     * @param {Object} t    第二点的坐标位置[latitude,longitude]
     */
    function calcDistance(f,t){
        var flat = calcDegree(f[0]) ;
        var flng = calcDegree(f[1]) ;
        var tlat = calcDegree(t[0]) ;
        var tlng = calcDegree(t[1])  ;

        var result = Math.sin(flat)*Math.sin(tlat) ;
        result += Math.cos(flat)*Math.cos(tlat)*Math.cos(flng-tlng) ;
        return Math.acos(result)*FINAL ;
    }

    module.exports = new NearbyDealsModel
})
