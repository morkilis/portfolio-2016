define(function(require, exports, module) {
    'use strict'

    var ScheduleModel = require('/js/models/schedule'),
        Handlebars = require('Handlebars'),
        Backbone = require('Backbone'),
        _ = require('_'),
        Tmpl = require('/js/template')

    module.exports = Backbone.View.extend({
        el: '#cinema',
        scheduleTmpl: Handlebars.compile(Tmpl.movie_schedule),
        priceTmpl: Handlebars.compile(Tmpl.current_price),
        events: {
            'tap #today': 'renderToday',
            'tap #tomorrow': 'renderTomorrow',
            'tap #afterTomorrow': 'renderAfterTomorrow'
        },
        initialize: function() {
            this.$el.prepend(this.priceTmpl(initData))
            ScheduleModel.on('change', function() {
                var ndLoadingTips = this.$el.find('#loading_tips')
                if (ndLoadingTips.length > 0) {
                    ndLoadingTips.replaceWith(this.scheduleTmpl(ScheduleModel.toJSON()['today']))
                } else {
                    $('#movie_schedule').replaceWith(this.scheduleTmpl(ScheduleModel.toJSON()[this.scheduleType]))
                }
            }, this)

            return this
        },
        _fetchData: function() {
            var type = this.scheduleType,
                date = new Date

            if (type === 'tomorrow') {
                date = new Date(Date.now() + 86400000)
            } else if (type === 'afterTomorrow') {
                date = new Date(Date.now() + 172800000)
            }

            ScheduleModel.set({cur: this.scheduleType}, {silent: true})

            if (!ScheduleModel.get(type) || ScheduleModel.get(type).errMsg) {
                ScheduleModel.fetch({
                    url: (M.config.API + 'poi/movieshows.json?pois=' + initData.poiid + '&dt=' + date.toISOString().split('T')[0]),
                    dataType: 'jsonp',
                    success: function(model) {
                        var temp = model.get('temp'),
                            newData = {}

                        _.extend(temp, {current: type})
                        newData[type] = temp
                        model.unset('temp', {slient: true})
                        model.set(newData)
                    },
                    error: function(e) {
                        M.log(e)
                        var errMsg = '暂无影讯信息',
                            newData = {}

                        if (!navigator.onLine) {
                            errMsg = '网络连接已断开，请连线后重试'
                        }
                        newData[type] = {errMsg: errMsg}
                        _.extend(newData[type], {current: type})
                        ScheduleModel.set(newData)
                    }
                })
            } else {
                ScheduleModel.change()
            }
        },
        renderToday: function() {
            this.scheduleType = 'today'
            this._fetchData()
        },
        renderTomorrow: function() {
            this.scheduleType = 'tomorrow'
            this._fetchData()
        },
        renderAfterTomorrow: function() {
            this.scheduleType = 'afterTomorrow'
            this._fetchData()
        }
    })
})
