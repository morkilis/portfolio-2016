var eve = eve || {},
    cinema = eve.cinema = eve.cinema || {}

;(function() {
    'use strict'

    var ScheduleModel = cinema.ScheduleModel,
        Tmpl = eve.merchant.tmpl

    cinema.ScheduleView = Backbone.View.extend({
        el: '#cinema',
        scheduleTmpl: Handlebars.compile(Tmpl.movie_schedule),
        priceTmpl: Handlebars.compile(Tmpl.current_price),
        events: {
            'tap #today': 'renderToday',
            'tap #tomorrow': 'renderTomorrow',
            'tap #afterTomorrow': 'renderAfterTomorrow'
        },
        initialize: function() {
            this.$el.prepend(this.priceTmpl(initData))
            ScheduleModel.on('change', this.render, this)

            return this
        },
        render: function() {
            var ndLoadingTips = this.$el.find('#loading_tips'),
                isInit = !this.scheduleType

            if (isInit) {
                ndLoadingTips.replaceWith(this.scheduleTmpl(ScheduleModel.toJSON()['today']))
            } else {
                $('#movie_schedule').replaceWith(this.scheduleTmpl(ScheduleModel.toJSON()[this.scheduleType]))
            }

            return this
        },
        _fetchData: function() {
            var that = this,
                type = this.scheduleType,
                date = new Date

            if (type === 'tomorrow') {
                date = new Date(Date.now() + 86400000)
            } else if (type === 'afterTomorrow') {
                date = new Date(Date.now() + 172800000)
            }

            if (!ScheduleModel.get(type) || ScheduleModel.get(type).errMsg) {
                ScheduleModel.fetch({
                    url: (cinema.API + 'poi/movieshows.json?pois=' + initData.merchantInfo.poiid + '&dt=' + date.toISOString().split('T')[0]),
                    silent: true,
                    dataType: 'jsonp',
                    success: function(model) {
                        var temp = model.get('temp'),
                            newData = {}

                        _.extend(temp, {current: type})
                        newData[type] = temp
                        model.unset('temp', {silent: true})
                        model.set(newData)
                    },
                    error: function(e) {
                        eve.log(e)
                        var errMsg = '暂无影讯信息',
                            newData = {}

                        if (!navigator.onLine) {
                            errMsg = '网络连接已断开，请连线后重试'
                        }
                        newData[type] = {errMsg: errMsg}
                        _.extend(newData[type], {current: type})
                        ScheduleModel.set(newData)
                        if (!ScheduleModel.hasChanged()) {
                            ScheduleModel.trigger('change')
                        }
                    }
                })
            } else {
                if (!ScheduleModel.hasChanged()) {
                    ScheduleModel.trigger('change')
                }
            }
        },
        renderToday: function() {
            this._renderViews('today')
        },
        renderTomorrow: function() {
            this._renderViews('tomorrow')
        },
        renderAfterTomorrow: function() {
            this._renderViews('afterTomorrow')
        },
        _renderViews: function(viewType) {
            if (this.scheduleType !== viewType) {
                this.$el.find('#' + this.scheduleType).removeClass('active')
                this.$el.find('#' + viewType).addClass('active')
                this.$el.find('#container').replaceWith('<p class="loading-tips" id="loading_tips">加载中...</p>')

                this.scheduleType = viewType
                this._fetchData()
            }
        }
    })
}())
