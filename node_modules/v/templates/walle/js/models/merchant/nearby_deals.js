var eve = eve || {},
    merchant = eve.merchant = eve.merchant || {},
    initParams = initParams || '';

;(function() {
    'use strict'

    var nearbyURL = 'deal/search/substore/$/near'
    var FINAL = 6378137.0
    var detailModel = merchant.detailModel

    // merchant nearby deals model
    var NearbyDealsModel = Backbone.Model.extend({
        // ?slug=(slug)&hasbuy=(hasbuy)&distance=(distance)&offset=(offset)&limit=(limit)
        urlRoot: function() {
            return (HOST + nearbyURL.replace(/\$/, detailModel.get('bizloginid')) + '?slug=' + detailModel.get('dealid') + '&hasbuy=' + detailModel.get('hasBought')) + initParams
        },
        parse: function(res) {
            var from = [detailModel.get('lat'), detailModel.get('lng')]

            if (res && res.data && _.isArray(res.data)) {
                res.data.forEach(function(deal) {
                    var mname = deal.mname,
                        price = deal.price,
                        reg = new RegExp("^" + mname + "(:|：)"),
                        to = []

                    deal.title = deal.title.replace(reg, function() {
                        return "仅售" + price + "元！"
                    })

                    // 如果是多个分店的话，全部算出来取最小值
                    to = deal.mlls.indexOf(';') ? deal.mlls.split(';') : deal.mlls
                    deal.distance = getDistance(from, to).toFixed(0)
                    if (deal.distance > 1000) {
                        deal.distance = (deal.distance/1000).toFixed(1) + 'km'
                    } else {
                        deal.distance += 'm'
                    }
                })
            }

            return res
        }
    })
    /**
     * 计算最近分店距离
     * @param {Array} [lat, lng]
     * @param {String or Array} 如果是`Array`的话，对他进行遍历，取最小值
     */
    function getDistance(from, to) {
        if ('string' === typeof to) {
            return calcDistance(from, to.split(','))
        } else {
            var distance = 0, tmp = 0
            to.forEach(function(t, i) {
                tmp = calcDistance(from, t.split(','))
                if (tmp < distance || i === 0) distance = tmp
            })
            return distance
        }
    }

    /**
     * 求某个经纬度的值的角度值
     * @param {Object} d
     */
    function calcDegree(d){
        return d*Math.PI/180.0 ;
    }

    /**
     * 根据两点经纬度值，获取两地的实际相差的距离
     * @param {Object} f    第一点的坐标位置[latitude,longitude]
     * @param {Object} t    第二点的坐标位置[latitude,longitude]
     */
    function calcDistance(f,t){
        var flat = calcDegree(f[0]) ;
        var flng = calcDegree(f[1]) ;
        var tlat = calcDegree(t[0]) ;
        var tlng = calcDegree(t[1])  ;

        var result = Math.sin(flat)*Math.sin(tlat) ;
        result += Math.cos(flat)*Math.cos(tlat)*Math.cos(flng-tlng) ;
        return Math.acos(result)*FINAL ;
    }

    merchant.NearbyDealsModel = new NearbyDealsModel
}())
