var eve = eve || {}
merchant = eve.merchant = eve.merchant || {}

;(function() {
    'use strict'

    if ('undefined' === typeof initData) {
        eve.log({
            msg: '**EVE** initData is undefined',
            url: 'js/models/merchant/detail.js'
        })
        return
    }

    // merchant detail model
    var Detail = Backbone.Model.extend({
        parse: function(originData) {
            var ori = originData,
                ret = ori,
                merchantInfo = ori.merchantInfo,
                phone = merchantInfo ? merchantInfo.phone : null,
                phoneNumber = ''

            if (phone.indexOf('/') === -1) {
                phoneNumber = phone.replace(/\-/, '')
                ret.telPhone = 'href=tel:' + phoneNumber
            }

            ret.phoneNumber = phoneNumber
            ret.dealid = ret.dealId
            // imeituan://merchantMap/$title/$lat/$long
            ret.mapLink = 'imeituan://merchantMap/' + merchantInfo.name + '/' + merchantInfo.lat + '/' + merchantInfo.lng
            ret.staticMap = staticMap()
            ret.isIpad = isIpad()

            _.extend(ret, merchantInfo)
            delete ret.merchantInfo
            delete ret.dealId

            return ret
        }
    })

    /**
     * @description 自适应宽度静态地图
     *
     */
    function staticMap() {
        var widthProportion = 292/320,
            heightProportion = 150/292,
            width= parseInt($(window).width() * widthProportion, 10),
            height = parseInt(width * heightProportion, 10),
            // mapWidth = (2 * width) > 640 ? 640 : 2 * width,
            mapWidth = 2 * width,
            mapHeight = parseInt(mapWidth * 150/292, 10)

        return { width: width, height: height, mapWidth: mapWidth, mapHeight: mapHeight }
    }

    /**
     * @description 检测UA是否是iPad
     *
     */
    function isIpad() {
        return /.*\(iPad; CPU OS \d_\d.* like Mac OS X.*/.test(navigator.userAgent)
    }

    merchant.detailModel = new Detail(initData, {parse: true})
}())
