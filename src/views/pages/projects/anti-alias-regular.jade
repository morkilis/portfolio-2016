extends ../../layouts/project.jade
block content
  main.project-page
    header
      include ../common/top_navigation

    section.AAR
      .title-teaser
        h1 Anti Alias Regular
        h3
          | A multi-platform investigation of low-resolution type when rendered on a high-resolution screen.
      article
        figure.featured-image
          img(src='/images/aa1.jpg')
        .six-columns
          h3 A short intro to monospaced type
          p
            | In 1829, William Austin Burt patented a machine called the “Typographer”, which was later referred to as the typewriter. Those early devices were not designed to create elegant layouts; they were just a way to get words on a page. Early (and cheap) typewrites could only move the same distance forward with each letter typed. This led to the necessity of monospaced typefaces: letters and characters that each occupy the same amount of horizontal space. Typefaces like Century Schoolbook, Courier and Letter Gothic were widely used at the time.
          p
            | With the advent of the computer, the 80’s were the golden years of monospaced typography. 8×8 pixel mono-spaced fonts on low-resolution 8-bit home computer displays were in common use because of the computer's extremely limited graphical capabilities. The screen layout was addressed as a regular grid of tiles, each of which could be set to display a character by indexing into the hardware's character map. Some systems allowed colored text to be displayed by varying the foreground and background color for each tile, however these were typically limited to a single console font.
          p
            | With time, technological advancements offered more memory availability and increased the graphical capabilities of computer displays. At this point, more typefces were digitized and were introduced to computers.
        .five-columns.shift-one
          .six-columns.clear
            figure
              img.twin(src='/images/AAR_typewriter.jpg')
              figcaption
                | Underwood Typewriter
          figure
            img.twin(src='/images/AAR_new-alphabet.jpg')
            figcaption
              | Wim Crowel’s
              i New Alphabet
              |  (1967): embracing the limitations of early data display screens and phototypesetting equipment. The typeface was based on a grid of 5 by 9 units with 45º corners and contained only horizontal and vertical strokes.
      article
        .five-columns
          figure
            img(src='/images/AAR-antialiasedO.png')
            figcaption
              | Examples of unanti-aliased and anti-aliased “o”.
        .six-columns.shift-one
          h3 Anti-aliasing
          p
            | As computer’s graphical capabilities improved, designers and programmers developed methods trying to perfect the ways in which typography is rendered on screen. To minimize the difference between digitized and original typography, a software technique called anti-aliasing was invented, which diminishes “jagged” lines that should be smooth. These lines occur because the output device, the monitor or printer, doesn’t have a high enough resolution to represent a smooth line. Anti-aliasing reduces the prominence of stairstep-like lines by surrounding the stairsteps with shades of gray.
      article
        figure
          img(src='/images/AAR-6building-blocks.png')
          figure
      article
        .six-columns
          h3 Anti Alias Regular building blocks
          p
            | For my typographic experiment, I wanted to see what a blown-up anti-aliased type can look like when rendered on high resolution screens. I wanted to try to create a new displayface that celebrates the gap between print and digital by presenting the computational workarounds at the foreground.
          p
            | When I started to sketch, I realized that there is no way to construct typefaces with different opacities in font-design softwares (Fontlab / Robofont), and that led me to explore other creative alternatives. I came up with my own workaround to create varying opacities still using traditional glygh paths: the family’s building blocks are composed of diagonal lines varying in width and density; the thicker and more dense the lines are, the darker the area looks from a distance.
        .five-columns.shift-one
          figure
            img(src='/images/AAR-letters.gif')
      article
        .eight-columns.center
          h3 Type specimen poster
          p
            | After I flushed out the Anti Alias glyph palette, I designed a double-sided type specimen poster enclosed in a folder: the front shows all of the Anti Alias charachters set in different sizes and the back shows a big, nocked-out letter A.
        .twelve-columns
          figcaption Front view
        .six-columns
          figure
            img(src='/images/aa4.jpg')
        .six-columns.clear
          figure
            img(src='/images/aa2.jpg')
        .six-columns
          figure
            img(src='/images/aa5.jpg')
        .six-columns.clear
          figure
            img(src='/images/aa6.jpg')
        .twelve-columns
          figcaption.hide-at-tablet Back view
        div
          figure
            img(src='/images/aa3.jpg')
      article
        .five-columns
          h3 Type specimen website
          p
            | I then wanted to text my typeface on screen, so I designed a website for it. I wrote a simple algorithm that pulls nouns, verbs, adjectives and adverbs from buckets of words I came up with, and then joins them to create clumsy sentences with every click. The font-size changes according to the length of each sentence (the longer it is, the smaller the charachters).
          a.visit-site(target='_blank', href='http://maurannstein.com/anti-alias/')
            | Visit the type specimen site
        .six-columns.shift-one.clear.website-video
          figure
            a.visit-site(target='_blank', href='http://maurannstein.com/anti-alias/')
              img(src='/images/AAR-websitebrowser.png')
            video(autoplay='', loop='')
              source(src='/videos/AAR-website.mp4', type='video/mp4')
              source(src='/videos/AAR-website.ogg', type='video/ogg')
              |                      Your browser does not support HTML5 video.
        div
